{"ast":null,"code":"var _jsxFileName = \"/Users/solandrea/Desktop/Escuela Digital/React JS/Contador con boton/src/container/IntemListContainer/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ItemCount from '../../components/ItemCount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ItemListContainer = _ref => {\n  _s();\n\n  let {\n    greeting\n  } = _ref;\n  //Primero estados\n  const [color, setColor] = useState('Verde');\n  const [textColor, setTextColor] = useState('#0f0d9e'); // let variable2 = \"rojo\"\n  //Segundo efectos\n\n  /* El useEffect recibe dos parámetros: el primero es la función callback que quiero ejecutar,\n  el segundo parámetro son las \"dependencias\" de dicho effect:\n    Las dependencias pueden ser las siguientes:\n    1- [] : la función callback se ejecutará SOLAMENTE cuando se monta el componente.\n    2- [estado]: la función callback se ejecutará cuando se MONTA el componente y ADEMAS cuando se actualiza el estado\n  */\n\n  useEffect(() => {\n    console.log(\"Se ejecuta al montarse el componente\");\n  }, []);\n  useEffect(() => {\n    console.log(\"Este effect se ejecuta cuando se monta y cuando se actualiza el estado 'color'\");\n    console.log(`El valor de el estado \"color\" es: ${color}`);\n  }, [color, textColor]); //Tercero funciones callbacks\n\n  const handleChange = () => {\n    console.log(\"Se cambiara el valor del estado\");\n\n    if (color === \"Verde\") {\n      setColor('Rojo');\n    } else {\n      setColor('Verde');\n    }\n  };\n\n  const handleChangeTextColor = () => {\n    setTextColor(\"#ffffff\");\n  }; // const handleChange2 = () => {\n  //   variable2 = \"verde\";\n  // }\n  //Lo último es el JSX\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: textColor\n      },\n      children: greeting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: color\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleChange,\n      children: \"Cambiar el valor del estado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleChangeTextColor,\n      children: \"Cambiar el color del texto greeting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ItemCount, {\n      stock: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemListContainer, \"Jg6h8MkoEVufNjB3/j3+LWyLtVg=\");\n\n_c = ItemListContainer;\nexport default ItemListContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemListContainer\");","map":{"version":3,"names":["React","useEffect","useState","ItemCount","ItemListContainer","greeting","color","setColor","textColor","setTextColor","console","log","handleChange","handleChangeTextColor"],"sources":["/Users/solandrea/Desktop/Escuela Digital/React JS/Contador con boton/src/container/IntemListContainer/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ItemCount from '../../components/ItemCount'\n\nconst ItemListContainer = ({greeting}) => {\n\n  //Primero estados\n  const [color, setColor] = useState('Verde')\n  const [textColor, setTextColor] = useState('#0f0d9e')\n\n  // let variable2 = \"rojo\"\n  //Segundo efectos\n\n  /* El useEffect recibe dos parámetros: el primero es la función callback que quiero ejecutar,\n  el segundo parámetro son las \"dependencias\" de dicho effect:\n    Las dependencias pueden ser las siguientes:\n    1- [] : la función callback se ejecutará SOLAMENTE cuando se monta el componente.\n    2- [estado]: la función callback se ejecutará cuando se MONTA el componente y ADEMAS cuando se actualiza el estado\n  */\n  useEffect(()=> {\n    console.log(\"Se ejecuta al montarse el componente\");\n  }, [])\n  \n  useEffect(()=> {\n    console.log(\"Este effect se ejecuta cuando se monta y cuando se actualiza el estado 'color'\");\n    console.log(`El valor de el estado \"color\" es: ${color}`)\n  }, [color, textColor])\n  \n  //Tercero funciones callbacks\n  const handleChange = () => {\n    console.log(\"Se cambiara el valor del estado\");\n    if (color === \"Verde\"){\n      setColor('Rojo');\n    } else {\n      setColor('Verde')\n    }\n  }\n\n  const handleChangeTextColor = () => {\n    setTextColor(\"#ffffff\")\n  }\n  // const handleChange2 = () => {\n  //   variable2 = \"verde\";\n  // }\n\n  //Lo último es el JSX\n  return (\n    <div>\n        <h1 style={{\n          color: textColor\n        }}>{greeting}</h1>\n        <h3>{color}</h3>\n        <button onClick={handleChange}>Cambiar el valor del estado</button>\n        <button onClick={handleChangeTextColor}>Cambiar el color del texto greeting</button>\n        {/*En React nunca utilizamos variables sueltas para hacer los renders, siempre utilizaremos estados*/}\n        {/* <h3>{variable2}</h3>\n        <button onClick={handleChange2}>Cambiar el valor de la variable</button> */}\n        <ItemCount stock={10}/>\n    </div>\n  )\n}\n\nexport default ItemListContainer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;;AAEA,MAAMC,iBAAiB,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EAExC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,OAAD,CAAlC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,SAAD,CAA1C,CAJwC,CAMxC;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;;EACED,SAAS,CAAC,MAAK;IACbS,OAAO,CAACC,GAAR,CAAY,sCAAZ;EACD,CAFQ,EAEN,EAFM,CAAT;EAIAV,SAAS,CAAC,MAAK;IACbS,OAAO,CAACC,GAAR,CAAY,gFAAZ;IACAD,OAAO,CAACC,GAAR,CAAa,qCAAoCL,KAAM,EAAvD;EACD,CAHQ,EAGN,CAACA,KAAD,EAAQE,SAAR,CAHM,CAAT,CAnBwC,CAwBxC;;EACA,MAAMI,YAAY,GAAG,MAAM;IACzBF,OAAO,CAACC,GAAR,CAAY,iCAAZ;;IACA,IAAIL,KAAK,KAAK,OAAd,EAAsB;MACpBC,QAAQ,CAAC,MAAD,CAAR;IACD,CAFD,MAEO;MACLA,QAAQ,CAAC,OAAD,CAAR;IACD;EACF,CAPD;;EASA,MAAMM,qBAAqB,GAAG,MAAM;IAClCJ,YAAY,CAAC,SAAD,CAAZ;EACD,CAFD,CAlCwC,CAqCxC;EACA;EACA;EAEA;;;EACA,oBACE;IAAA,wBACI;MAAI,KAAK,EAAE;QACTH,KAAK,EAAEE;MADE,CAAX;MAAA,UAEIH;IAFJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAII;MAAA,UAAKC;IAAL;MAAA;MAAA;MAAA;IAAA,QAJJ,eAKI;MAAQ,OAAO,EAAEM,YAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ,eAMI;MAAQ,OAAO,EAAEC,qBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANJ,eAUI,QAAC,SAAD;MAAW,KAAK,EAAE;IAAlB;MAAA;MAAA;MAAA;IAAA,QAVJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CAxDD;;GAAMT,iB;;KAAAA,iB;AA0DN,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}